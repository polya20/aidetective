generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String        @default("USER")
  accounts      Account[]
  bookmark      Bookmark[]
  collections   Collections[]
  sessions      Session[]
  tools         Tools[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tools {
  toolId           String             @id @unique @default(cuid())
  slug             String             @unique
  name             String
  summary          String
  description      String
  websiteURL       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  featuredAt       DateTime?
  pricing          Pricing            @default(free)
  isToolPublished  Boolean            @default(false)
  appStoreURL      String?
  playStoreURL     String?
  userId           String
  possibleUseCase  String
  imageURL         String
  bookmark         Bookmark[]
  user             User               @relation(fields: [userId], references: [id])
  ToolsCollections ToolsCollections[]
  tags             Tags[]             @relation("TagsToTools")
}

model Tags {
  tagId     String   @id @unique @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tools     Tools[]  @relation("TagsToTools")
}

model Bookmark {
  bookmarkId String @id @unique @default(cuid())
  toolId     String
  userId     String
  tools      Tools  @relation(fields: [toolId], references: [toolId])
  user       User   @relation(fields: [userId], references: [id])
}

model Collections {
  collectionId     String             @id @unique @default(cuid())
  userId           String
  name             String
  description      String
  imageURL         String?
  slug             String
  user             User               @relation(fields: [userId], references: [id])
  ToolsCollections ToolsCollections[]
}

model ToolsCollections {
  toolsCollectionId String      @id @unique @default(cuid())
  toolId            String
  collectionId      String
  collections       Collections @relation(fields: [collectionId], references: [collectionId])
  tools             Tools       @relation(fields: [toolId], references: [toolId])
}

enum Pricing {
  free
  paid
  free_trail
  free_trail_no_card
  freemium
  waitlist
  request_demo
  yearly_subscription
  one_time_payment
}
